# https://esphome.io/guides/configuration-types#packages-as-templates
defaults:
  # Output variables
  # pwm_platform: ""
  # id: ""
  # pin: ""
  pin_inverted: "false"
  pwm_frequency: "25000"
  pwm_min_power: "0.2"
  pwm_max_power: "1"
  # Fan variables
  restore_mode: "ALWAYS_OFF"
  # name: ""
  speed_count: "10"
  high_preset_name: "High"
  high_preset_speed: "10"
  medium_preset_name: "Medium"
  medium_preset_speed: "7"
  low_preset_name: "Low"
  low_preset_speed: "4"
  quiet_preset_name: "Quiet"
  quiet_preset_speed: "1"
  off_preset_name: "Off"

  

  start_threshold: "20.0"
  stall_threshold: "0.0"
  ramp_up_speed: "100"
  ramp_up_delay: "75ms"

# https://esphome.io/components/esphome
esphome:
  # https://esphome.io/components/esphome#on-boot
  on_boot:
    priority: -100
    then:
      - logger.log:
          format: "Setting ${fan_name} Frequency to %-.0f"
          args:
            - id(${fan_id}_frequency).state
          level: INFO
          tag: ${fan_id}
      - output.esp8266_pwm.set_frequency:
          id: ${fan_id}_output
          frequency: !lambda return id(${fan_id}_frequency).state;

# https://esphome.io/guides/automations#global-variables
globals:
  - id: ${fan_id}_startup_speed
    type: int
    restore_value: no

# https://esphome.io/components/output
output:
    # https://esphome.io/components/output/ledc
    # https://esphome.io/components/output/esp8266_pwm
    # https://esphome.io/components/output/libretiny_pwm
  - platform: ${pwm_platform}
    id: ${fan_id}_output
    pin:
        number: ${pin}
        inverted: ${pin_inverted}
    frequency: ${pwm_frequency}
    min_power: ${pwm_min_power}
    max_power: ${pwm_max_power}
    zero_means_zero: true

script:
  - id: ${fan_id}_on_preset_set_logger
    parameters: 
      preset_mode: string
      fan_speed: int
    then:
      - logger.log:
          format: Preset mode %s found, setting fan speed to %d
          args: [ preset_mode.c_str(), fan_speed ]
          level: DEBUG
          tag: ${fan_id}

# https://esphome.io/components/fan
fan:
  # https://esphome.io/components/fan/speed
  - platform: speed
    output: ${fan_id}_output
    name: ${fan_name}
    id: ${fan_id}
    speed_count: ${speed_count}
    restore_mode: ${restore_mode}
    #icon: ${icon}
    preset_modes:
      - ${high_preset_name}
      - ${medium_preset_name}
      - ${low_preset_name}
      - ${quiet_preset_name}
      - ${off_preset_name}
    on_turn_on:
      - logger.log:
          format: ${fan_name} turned on
          level: INFO
          tag: ${fan_id}
    on_turn_off:
      - logger.log:
          format: ${fan_name} turned off
          level: INFO
          tag: ${fan_id}
    on_speed_set:
      - logger.log:
          format: ${fan_name} speed was changed to %d
          args:
            - x
          level: INFO
          tag: ${fan_id}
    on_preset_set:
      - if:
          condition:
            lambda: return x != "";
          then:
            - logger.log:
                format: ${fan_name} preset mode was changed to "%s"
                args:
                  - x.c_str()
                level: INFO
                tag: ${fan_id}
      - if:
          condition:
            lambda: return x == "${quiet_preset_name}";
          then:
            - script.execute:
                id: ${fan_id}_on_preset_set_logger
                preset_mode: "Quiet"
                fan_speed: "${quiet_preset_speed}"
            - fan.turn_on:
                id: ${fan_id}
                speed: ${quiet_preset_speed}
      - if:
          condition:
            lambda: return x == "${low_preset_name}";
          then:
            - script.execute:
                id: ${fan_id}_on_preset_set_logger
                preset_mode: ${low_preset_name}
                fan_speed: ${low_preset_speed}
            - fan.turn_on:
                id: ${fan_id}
                speed: ${low_preset_speed}
      - if:
          condition:
            lambda: return x == "${medium_preset_name}";
          then:
            - script.execute:
                id: ${fan_id}_on_preset_set_logger
                preset_mode: ${medium_preset_name}
                fan_speed: ${medium_preset_speed}
            - fan.turn_on:
                id: ${fan_id}
                speed: ${medium_preset_speed}
      - if:
          condition:
            lambda: return x == "${high_preset_name}";
          then:
            - script.execute:
                id: ${fan_id}_on_preset_set_logger
                preset_mode: ${high_preset_name}
                fan_speed: ${high_preset_speed}
            - fan.turn_on:
                id: ${fan_id}
                speed: ${high_preset_speed}